import { isFalsy } from '../src/index'

test('isFalsy', () => {
	expect(isFalsy('')).toBe(true)
	expect(isFalsy([])).toBe(true)
	expect(isFalsy({})).toBe(true)
	expect(isFalsy(0)).toBe(true)
	expect(isFalsy(false)).toBe(true)
	expect(isFalsy(null)).toBe(true)
	expect(isFalsy(undefined)).toBe(true)
	expect(isFalsy(void 0)).toBe(true)
})

test('NOT isFalsy', () => {
	// expect(isFalsy('')).toBe(false)
	// expect(isFalsy([])).toBe(false)
	// expect(isFalsy({})).toBe(false)
	// expect(isFalsy(0)).toBe(false)
	// expect(isFalsy(false)).toBe(false)
	// expect(isFalsy(null)).toBe(false)
	expect(isFalsy(true)).toBe(false)
	// expect(isFalsy(undefined)).toBe(false)
	// expect(isFalsy(void 0)).toBe(false)

	// expect(isFalsy(Array)).toBe(false)
	expect(isFalsy(ArrayBuffer)).toBe(false)
	// expect(isFalsy(BigInt)).toBe(false)
	expect(isFalsy(Blob)).toBe(false)
	// expect(isFalsy(Boolean)).toBe(false)
	expect(isFalsy(Buffer)).toBe(false)
	// expect(isFalsy(Date)).toBe(false)
	expect(isFalsy(Error)).toBe(false)
	// expect(isFalsy(Function)).toBe(false)
	expect(isFalsy(Infinity)).toBe(false)
	expect(isFalsy(NaN)).toBe(false)
	// expect(isFalsy(Number)).toBe(false)
	// expect(isFalsy(Object)).toBe(false)
	// expect(isFalsy(Promise)).toBe(false)
	// expect(isFalsy(String)).toBe(false)
	// expect(isFalsy(Symbol)).toBe(false)
})
